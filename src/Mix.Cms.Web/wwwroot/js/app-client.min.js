'use strict';

var app = angular.module('MixClient', ['ngRoute', 'LocalStorageModule', 'components', 'cart', 'ngSanitize']);
var serviceBase = '';
var modules = angular.module('components', []);
var cart = angular.module('cart', []);
(function (angular) {
    'use strict';
    app.controller('AppClientController',
        ['$rootScope', '$scope', 'GlobalSettingsService', 'CommonService', 'AuthService', 'BaseService'
            , 'localStorageService', 'TranslatorService', 'SharedModuleDataService',
            function ($rootScope, $scope, globalSettingsService, commonService, authService, baseService,
                localStorageService, translatorService, moduleDataService) {
                $scope.lang = '';
                $scope.isInit = false;
                $scope.mediaFile = {
                    file: null,
                    fullPath: '',
                    folder: 'module-data',
                    title: '',
                    description: ''
                };
                $scope.cartData = {
                    items: [],
                    totalItems: 0,
                    total: 0,
                };
                $rootScope.globalSettingsService = globalSettingsService;
                $scope.changeLang = $rootScope.changeLang;
                $scope.init = function (lang) {
                    if (!$rootScope.isBusy) {
                        $rootScope.isBusy = true;
                        // globalSettingsService.fillGlobalSettings().then(function (response) {
                        $scope.cartData = localStorageService.get('shoppingCart');
                        if (!$scope.cartData) {
                            $scope.cartData = {
                                items: [],
                                totalItems: 0,
                                total: 0,
                            };
                        }
                        commonService.fillAllSettings(lang).then(function (response) {
                            if ($rootScope.globalSettings) {
                                authService.fillAuthData().then(function (response) {
                                    $rootScope.authentication = authService.authentication;
                                    $scope.isInit = true;
                                    $rootScope.isInit = true;
                                    $rootScope.isBusy = false;
                                    $scope.$apply();
                                });

                                // });                                
                            } else {
                                $scope.isInit = true;
                                $rootScope.isInit = true;
                                $rootScope.isBusy = false;
                            }
                        });

                        // });

                    }
                };

                $scope.translate = $rootScope.translate;
                $scope.previewData = function (moduleId, id) {
                    var obj = {
                        moduleId: moduleId,
                        id: id
                    };
                    $rootScope.preview('module-data', obj, null, 'modal-lg');
                }

                $scope.initModuleForm = async function (name, successCallback, failCallback) {
                    var resp = null;
                    $scope.successCallback = successCallback;
                    $scope.failCallback = failCallback;
                    setTimeout(async () => {
                        $scope.name = name;
                        if ($scope.id) {
                            resp = await moduleDataService.getModuleData($scope.id, $scope.dataId, 'portal');
                        }
                        else {
                            resp = await moduleDataService.initModuleForm($scope.name);
                        }

                        if (resp && resp.isSucceed) {
                            $scope.activedModuleData = resp.data;
                            $rootScope.isBusy = false;
                            $scope.$apply();
                        }
                        else {
                            if (resp) {
                                if ($scope.errorCallback) {
                                    $rootScope.executeFunctionByName($scope.errorCallback, [resp], window);
                                }
                                else {
                                    $rootScope.showErrors(resp.errors);
                                }
                            }
                            $rootScope.isBusy = false;
                            $scope.$apply();
                        }
                    }, 500);
                };
                $scope.saveEmployee = function () {
                    var msg = $rootScope.settings.data['employee_confirm_msg'] || 'Are you sure you want to submit this form? Please be noted that after submission, all information cannot be changed or adjusted.';
                    $rootScope.showConfirm($scope, 'saveEmployeeConfirmed', [], null, '', msg);
                };
                $scope.saveEmployeeConfirmed = async function () {
                    if ($scope.validateEmployee($scope.activedModuleData.jItem)) {
                        var mediaService = angular.copy(baseService);
                        mediaService.init('media');
                        $rootScope.isBusy = true;
                        var getMedia = await mediaService.getSingle(['portal']);
                        if (getMedia.isSucceed) {
                            // mediaFile.fileName = file.name.substring(0, file.name.lastIndexOf('.'));
                            // mediaFile.extension = file.name.substring(file.name.lastIndexOf('.'));
                            // mediaFile.fileStream = imgData;
                            var media = getMedia.data;
                            media.title = '';
                            media.description = '';
                            media.mediaFile = $scope.mediaFile;
                            var resp = await mediaService.save(media);
                            if (resp && resp.isSucceed) {
                                $scope.activedModuleData.jItem['avatar'].value = resp.data.fullPath;
                                return $scope.saveModuleData();
                            }
                            else {
                                if (resp) { $rootScope.showErrors(resp.errors); }
                                $rootScope.isBusy = false;
                                $scope.$apply();
                            }
                        }

                    }
                };
                $scope.validateEmployee = function (data) {
                    var year = parseInt(data.start_year.value);
                    if (year < 1900 || year > 2019) {
                        $rootScope.showErrors([$rootScope.translate('invalid_year')]);
                        return false;
                    } else if (!$scope.mediaFile.fileName) {
                        $rootScope.showErrors([$rootScope.translate('avatar_required')]);
                        return false;
                    } else {
                        return true;
                    }

                };
                $scope.saveModuleData = async function () {

                    var resp = await moduleDataService.saveModuleData($scope.activedModuleData);
                    if (resp && resp.isSucceed) {
                        $scope.activedModuleData = resp.data;
                        if ($scope.successCallback) {
                            $rootScope.executeFunctionByName($scope.successCallback, [resp], window);
                        }
                        else {
                            var msg = $rootScope.settings.data['employee_success_msg'] || 'Thank you for submitting! Your lovely photo is well received ðŸ˜Š';
                            $rootScope.showConfirm($scope, '', [], null, '', msg);
                        }

                        $rootScope.isBusy = false;
                        $scope.initModuleForm($scope.name);
                        $rootScope.isBusy = false;
                        $scope.$apply();
                    }
                    else {
                        if (resp) {
                            if ($scope.failCallback) {
                                $rootScope.executeFunctionByName($scope.failCallback, [resp], window);
                            }
                            else {
                                $rootScope.showErrors(resp.errors);
                            }
                        }
                        $rootScope.isBusy = false;
                        $scope.$apply();
                    }
                };
                $scope.shareFB = function (url) {
                    FB.ui({
                        method: 'share',
                        href: url,
                    }, function (response) { });
                }
                $scope.shareTwitter = function (url, content) {
                    var text = encodeURIComponent(content);
                    var shareUrl = 'https://twitter.com/intent/tweet?url=' + url + '&text=' + text;
                    var win = window.open(shareUrl, 'ShareOnTwitter', getWindowOptions());
                    win.opener = null; // 2
                }
                $scope.saveShoppingCart = function () {
                    localStorageService.set('shoppingCart', $scope.cartData);
                }

                var getWindowOptions = function () {
                    var width = 500;
                    var height = 350;
                    var left = (window.innerWidth / 2) - (width / 2);
                    var top = (window.innerHeight / 2) - (height / 2);

                    return [
                        'resizable,scrollbars,status',
                        'height=' + height,
                        'width=' + width,
                        'left=' + left,
                        'top=' + top,
                    ].join();
                };
            }]);


})(window.angular);
modules.component('addToCartButton', {
    templateUrl: '/app/app-client/components/add-to-cart-button/view.html',
    controller: ['$rootScope', 'localStorageService',
        function ($rootScope, localStorageService) {
            var ctrl = this;
            ctrl.addToCart = function () {
                var current = $rootScope.findObjectByKey(ctrl.cartData.items, 'propertyId', ctrl.propertyId);
                if (current) {
                    current.quantity += parseInt(ctrl.quantity);
                }
                else {
                    var item = {
                        propertyId: ctrl.propertyId,
                        title: ctrl.title,
                        imageUrl: ctrl.imageUrl,
                        price: ctrl.price,
                        quantity: parseInt(ctrl.quantity) || 1
                    };
                    ctrl.cartData.items.push(item);
                    ctrl.cartData.totalItems += 1;
                }
                ctrl.cartData.total+= parseInt(ctrl.price);
                localStorageService.set('shoppingCart', ctrl.cartData);
            }
        }
    ],
    bindings: {
        cartData: '=',
        propertyId: '=',
        title: '=',
        imageUrl: '=',
        price: '=',
        quantity: '=',
    }
});
modules.component('booking', {
    templateUrl: '/app/app-client/components/booking/index.html',
    controller: [
        '$rootScope', 'CommonService', 
        function ($rootScope, commonService) {
            var ctrl = this;
            ctrl.submitted = false;
            ctrl.isShow = false;
            ctrl.order = {
                name:'',
                propertyId:'',
                price:'',
                quantity: 1
            };
            ctrl.edm = 'Url: <a href="[url]">View Tour</a> <br/>Name: [name] <br/>'
                        + 'Phone: [phone]<br/>'
                        + 'Email: [email]<br/>'
                        + 'Quantity: [quantity]<br/>'
                        + 'Message: [message] <br/>'
                        + 'property: [property] <br/>Price: [price] <br/>';
            ctrl.init = function () {
                if (!$rootScope.isInit) {
                    setTimeout(function () { ctrl.init(); }, 500);
                } else {
                    ctrl.order.propertyId = ctrl.propertyId;
                    ctrl.order.price = ctrl.price;
                    ctrl.order.quantity = ctrl.quantity;
                }
            }
            ctrl.book = function(){
                ctrl.edm = ctrl.edm.replace(/\[url\]/g,window.top.location.href);
                ctrl.edm = ctrl.edm.replace(/\[name\]/g,ctrl.order.name);
                ctrl.edm = ctrl.edm.replace(/\[phone\]/g,ctrl.order.phone);
                ctrl.edm = ctrl.edm.replace(/\[email\]/g,ctrl.order.email);
                ctrl.edm = ctrl.edm.replace(/\[message\]/g,ctrl.order.message);
                ctrl.edm = ctrl.edm.replace(/\[property\]/g,ctrl.order.propertyId);
                ctrl.edm = ctrl.edm.replace(/\[price\]/g,ctrl.order.price);
                ctrl.edm = ctrl.edm.replace(/\[quantity\]/g,ctrl.order.quantity);
                
                commonService.sendMail('Booking - ' + ctrl.propertyName, ctrl.edm);
                ctrl.submitted = true;
            }
        }
    ],
    bindings: {
        propertyId: '=',
        propertyName: '=',
        price: '=',
        quantity: '=',
    }
});

modules.component('fbCustomerChat', {
    templateUrl: '/app/app-client/components/fb-customer-chat/view.html',
    controller: ['$location', function ($location) {
        var ctrl = this;
        this.$onInit = function(){
            setTimeout(() => {
                FB.XFBML.parse();
            }, 200);
        }    
    }],
    bindings: {
        fbPageId:'=',
        themeColor:'=',
        inGreeting:'=',
        outGreeting:'='
    }
});

modules.component('fbLike', {
    templateUrl: '/app/app-client/components/fb-like/fb-like.html',
    controller: ['$location', function ($location) {
        var ctrl = this;
        ctrl.href = ctrl.href || window.top.location.href;        
        ctrl.layout = ctrl.layout || 'standard';        
        ctrl.size = ctrl.size || 'small';        
        ctrl.showFaces = ctrl.showFaces || true;    
        this.$onInit = function(){
            setTimeout(() => {
                FB.XFBML.parse();
            }, 200);
        }    
    }],
    bindings: {
        href:'=',
        layout:'=',
        size:'=',
        showFaces:'='
    }
});

modules.component('fbSend', {
    templateUrl: '/app/app-client/components/fb-send/fb-send.html',
    controller: ['$location', function ($location) {
        var ctrl = this;
        ctrl.href = ctrl.href || window.top.location.href;
        ctrl.send = function () {
            var link = ctrl.href || window.top.location.href;
            FB.ui({
                method: 'send',
                link: link,
            }, function (response) { });
        };
    }],
    bindings: {
        href:'=',
        appId:'='
    }
});

modules.component('fbShare', {
    templateUrl: '/app/app-client/components/fb-share/fb-share.html',
    controller: ['$location', function ($location) {
        var ctrl = this;
        ctrl.href = ctrl.href || window.top.location.href;
        ctrl.share = function () {
            var href = window.top.location.href;
            FB.ui({
                method: 'share',
                href: href,
            }, function (response) { });
        };
    }],
    bindings: {
        href:'='
    }
});
modules.component('googlePay', {
    templateUrl: '/app/app-client/components/google-pay/view.html',
    controller: [
        '$rootScope', 'CommonService',
        function ($rootScope, commonService) {
            var ctrl = this;
            ctrl.baseRequest = {
                apiVersion: 2,
                apiVersionMinor: 0
            };
            ctrl.tokenizationSpecification = {
                type: 'PAYMENT_GATEWAY',
                parameters: {
                    'gateway': 'example',
                    'gatewayMerchantId': 'exampleGatewayMerchantId'
                }
            };
            ctrl.allowedCardNetworks = ["AMEX", "DISCOVER", "JCB", "MASTERCARD", "VISA"];
            ctrl.allowedCardAuthMethods = ["PAN_ONLY", "CRYPTOGRAM_3DS"];
            ctrl.baseCardPaymentMethod = {
                type: 'CARD',
                parameters: {
                    allowedAuthMethods: ctrl.allowedCardAuthMethods,
                    allowedCardNetworks: ctrl.allowedCardNetworks
                }
            };
            ctrl.cardPaymentMethod = Object.assign(
                { tokenizationSpecification: ctrl.tokenizationSpecification },
                ctrl.baseCardPaymentMethod
            );
            ctrl.paymentsClient = null;
            ctrl.paymentDataRequest = null;
            ctrl.getGoogleIsReadyToPayRequest = function () {
                return Object.assign(
                    {},
                    ctrl.baseRequest,
                    {
                        allowedPaymentMethods: [ctrl.baseCardPaymentMethod]
                    }
                );
            };
            ctrl.getGooglePaymentDataRequest = function() {
                ctrl.paymentDataRequest = Object.assign({}, ctrl.baseRequest);
                ctrl.paymentDataRequest.allowedPaymentMethods = [ctrl.cardPaymentMethod];
                ctrl.paymentDataRequest.transactionInfo = ctrl.getGoogleTransactionInfo();
                ctrl.paymentDataRequest.merchantInfo = {
                  // @todo a merchant ID is available for a production environment after approval by Google
                  // See {@link https://developers.google.com/pay/api/web/guides/test-and-deploy/integration-checklist|Integration checklist}
                  merchantId: '01234567890123456789',
                  merchantName: 'Example Merchant'
                };
                return ctrl.paymentDataRequest;
              };
              ctrl.getGooglePaymentsClient = function() {
                if ( ctrl.paymentsClient === null ) {
                    ctrl.paymentsClient = new google.payments.api.PaymentsClient({environment: 'TEST'});
                }
                return ctrl.paymentsClient;
              }
              ctrl.onGooglePayLoaded = function() {
                ctrl.paymentsClient = ctrl.getGooglePaymentsClient();
                ctrl.paymentsClient.isReadyToPay(ctrl.getGoogleIsReadyToPayRequest())
                    .then(function(response) {
                      if (response.result) {
                        ctrl.addGooglePayButton();
                        // @todo prefetch payment data to improve performance after confirming site functionality
                        // prefetchGooglePaymentData();
                      }
                    })
                    .catch(function(err) {
                      // show error in developer console for debugging
                      console.error(err);
                    });
              };
              ctrl.addGooglePayButton = function() {
                ctrl.paymentsClient = ctrl.getGooglePaymentsClient();
                const button =
                    ctrl.paymentsClient.createButton({onClick: ctrl.onGooglePaymentButtonClicked});
                document.getElementById('container').appendChild(button);
              };
              ctrl.getGoogleTransactionInfo = function() {
                return {
                  currencyCode: ctrl.currencyCode || 'USD',
                  totalPriceStatus: ctrl.totalPriceStatus || 'FINAL',
                  // set to cart total
                  totalPrice: ctrl.totalPrice || '0.00'
                };
              };
              ctrl.prefetchGooglePaymentData = function() {
                ctrl.paymentDataRequest = ctrl.getGooglePaymentDataRequest();
                // transactionInfo must be set but does not affect cache
                ctrl.paymentDataRequest.transactionInfo = {
                  totalPriceStatus: 'NOT_CURRENTLY_KNOWN',
                  currencyCode: 'USD'
                };
                ctrl.paymentsClient = ctrl.getGooglePaymentsClient();
                ctrl.paymentsClient.prefetchPaymentData(ctrl.paymentDataRequest);
              };
              ctrl.onGooglePaymentButtonClicked = function() {
                ctrl.paymentDataRequest = ctrl.getGooglePaymentDataRequest();
                ctrl.paymentDataRequest.transactionInfo = ctrl.getGoogleTransactionInfo();
              
                ctrl.paymentsClient = ctrl.getGooglePaymentsClient();
                ctrl.paymentsClient.loadPaymentData(ctrl.paymentDataRequest)
                    .then(function(paymentData) {
                      // handle the response
                      ctrl.processPayment(paymentData);
                    })
                    .catch(function(err) {
                      // show error in developer console for debugging
                      console.error(err);
                    });
              };
              ctrl.processPayment = function(paymentData) {
                // show returned data in developer console for debugging
                  // console.log(paymentData);
                // @todo pass payment token to your gateway to process payment
                paymentToken = paymentData.paymentMethodData.tokenizationData.token;
              };
              ctrl.init = function(){
                  setTimeout(() => {
                    ctrl.onGooglePayLoaded();
                  }, 1000);
              }
        }
    ],
    bindings: {
        totalPriceStatus: '=',
        currencyCode: '=',
        totalPrice: '='
    }
});
modules.component('shoppingCart', {
    templateUrl: '/app/app-client/components/shopping-cart/view.html',
    controller: [
        '$rootScope','localStorageService', 'CommonService', 
        function ($rootScope, localStorageService, commonService) {
            var ctrl = this;
            ctrl.submitted = false;
            ctrl.isShow = false;
            
            ctrl.edm = 'Url: <a href="[url]">View Tour</a> <br/>Name: [name] <br/>'
                        + 'Phone: [phone]<br/>'
                        + 'Email: [email]<br/>'
                        + 'Quantity: [quantity]<br/>'
                        + 'Message: [message] <br/>'
                        + 'property: [property] <br/>Price: [price] <br/>';
            ctrl.init = function () {
                
            };
            ctrl.showShoppingCart = function(){
                $('#modal-shopping-cart').modal('show');
            }
            ctrl.calculate = function(){
                ctrl.cartData.total = 0;
                ctrl.cartData.totalItems = ctrl.cartData.items.length;
                angular.forEach(ctrl.cartData.items, function(e){
                    ctrl.cartData.total+= (parseInt(e.price) * e.quantity);
                });
                localStorageService.set('shoppingCart', ctrl.cartData);
            };
            ctrl.removeItem = function(index){
                ctrl.cartData.items.splice(index,1);
                ctrl.calculate();
            }
            ctrl.book = function(){
                ctrl.edm = ctrl.edm.replace(/\[url\]/g,window.top.location.href);
                ctrl.edm = ctrl.edm.replace(/\[name\]/g,ctrl.order.name);
                ctrl.edm = ctrl.edm.replace(/\[phone\]/g,ctrl.order.phone);
                ctrl.edm = ctrl.edm.replace(/\[email\]/g,ctrl.order.email);
                ctrl.edm = ctrl.edm.replace(/\[message\]/g,ctrl.order.message);
                ctrl.edm = ctrl.edm.replace(/\[property\]/g,ctrl.order.propertyId);
                ctrl.edm = ctrl.edm.replace(/\[price\]/g,ctrl.order.price);
                ctrl.edm = ctrl.edm.replace(/\[quantity\]/g,ctrl.order.quantity);
                
                commonService.sendMail('Booking - ' + ctrl.propertyName, ctrl.edm);
                ctrl.submitted = true;
                setTimeout(() => {
                    ctrl.submitted = false;
                }, 1000);
                ctrl.cartData = {
                    items: [],
                    totalItems:0,
                    total:0,
                };
                localStorageService.set('shoppingCart', ctrl.cartData);
            }
        }
    ],
    bindings: {
        cartData: '='
    }
});